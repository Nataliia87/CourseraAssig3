arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=(size+1000))
mutate(cran3,correct_size=size+1000)
summarise(cran,avg_bytes=mean(size))
summarise(cran,mean(size))
summarise(cran,avg_bytes=mean(size))
info()
skip()
library(httr)
myapp <- oauth_app("github",
key = "bccde7d9532501973ea6",
secret = "d7fb43c831275f223e998dd9b4c6047dd171446e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
names(req$name)
library(jsonlite)
names(req$url)
names(req$date)
names(req$content)
as.data.frame(req)
con<-content(req)
con
as.data.frame(con)
dim(con)
length(con)
json2 <- jsonlite::fromJSON(toJSON(con))
json2
view(json2)
names(json2)
json2[json2$name=="datasharing"]
json2[json2$name=="datasharing",]
json2[json2$name=="datasharing",]
json2[json2$name=="datasharing",json2$created_at]
json2[json2$name=="datasharing",!is.nan(json2$created_at)]
json2[json2$name=="datasharing"]
json2[json2$name=="datasharing",json2$created_at]
json2[json2$name=="datasharing",1]
json2[json2$name=="datasharing",2]
json2[json2$name=="datasharing",3]
json2[json2$name=="datasharing",4]
json2[json2$name=="datasharing",5]
json2[json2$name=="datasharing",6]
json2[json2$name=="datasharing",7]
json2[json2$name=="datasharing",8]
json2[json2$name=="datasharing",9:15]
json2[json2$name=="datasharing",15:20]
json2[json2$name=="datasharing",25:30]
json2[json2$name=="datasharing",30:35]
json2[json2$name=="datasharing",35:45]
json2[json2$name=="datasharing",45:55]
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
acs<-read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
unique(acs$AGEP)
sqldf("select distinct pwgtp1 from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode=readLines(con)
library(XML)
html<-htmlTreeParse(url,useInternalNodes = TRUE)
url<-"http://biostat.jhsph.edu/~jleek/contact.html"
html<-htmlTreeParse(url,useInternalNodes = TRUE)
?nchar
a<-nchar(html,html[10,])
html[10,]
class(html)
z<-as.data.frame(html)
html2<-as(html,"character")
class(html2)
html2
head(html2)
vectors<-strsplit(html2,"\n")
vectors
length(vectors[10])
vectors[10]
vectors[10]
vectors[10,]
vectors[[10]]
vectors(10)
vectors[0]
vectors[1]
vectors[1][[10]]
row10<- vectors[1]
row10[10]
row10
class(row10)
length(row10)
htmlCode = readLines(con)
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[10],htmlCode[20])
nchar(c(htmlCode[10],htmlCode[20],htmlCode[30],htmlCode[100]))
doc<-read.fortran("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","F9.2")
doc<-read.fortran("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","F9.2")
doc<-read.fortran("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","F9.4")
doc<-read.fortran("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",format="F9.4")
doc<-read.fortran("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","F9.4",)
doc<-read.fortran("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","F9.0")
doc<-read.fortran("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for","F9.2")
file <- get("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
file <- GET("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
doc<-read.fortran(file,"F9.2")
file
read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",skip=4,fwf_widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",skip=4,c(12, 7, 4, 9, 4, 9, 4, 9, 4))
data<-read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",skip=4,c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(data[,4])
data<-read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(data[,4])
data<-read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",skip=4,c(12, 7, 4, 9, 4, 9, 4, 9, 4))
data[,4]
data[1]
data[1,]
sum(data[,4])
data<-read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",skip=4,c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(data[,4])
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
names(cran)
group_by(cran,package)
group_by(.cran,package)
info()
skip()
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean)
summarize(by_package,mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id,country,package,size) %>%
print
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
x<-1:6
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
makeVector <- function(x = numeric()) {
+     m <- NULL
+     set <- function(y) {
+         x <<- y
+         m <<- NULL
+     }
+     get <- function() x
+     setmean <- function(mean) m <<- mean
+     getmean <- function() m
+     list(set = set, get = get,
+          setmean = setmean,
+          getmean = getmean)
+ }
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
getmean
}
makeVector(x)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
Sys.setlocale("en_US")
Sys.setlocale("en_US.UTF-8")
Sys.setlocale(,"en_US.UTF-8")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment<-now()
this_moment
minute(this_moment)
my_date<- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
Sys.getlocale("LC_TIME")
ymd("March 12,1975")
mdy("March 12,1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd(//"192012")
ymd(--"192012")
ymd(-"192012"-)
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment,hours = 21, minutes = 51, seconds = 34)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone = "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17,2008",tz="Singapore")
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?interval
how_long<-arrive-last_time
how_long<-interval(arrive,last_time)
last_time<-mdy("06-17-2008",tz="Singapore")
how_long<-interval(arrive,last_time)
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
m2<-cbind(1,1:4)
colnames(m2)<-c("x","y")
colnames(m2,do.NULL = FALSE
)
colnames(m2)<-c("x","y")
m2
m2<-cbind(1,1:4)
m2
colnames(m2[,2],"x")
colnames(m2[,2],"x", do.NULL = FALSE)
m2
setwd("C:/Users/Наташка/Desktop/Coursera for Nataliia/ProgAssignments/CourseraAssig3/UCI HAR Dataset")
library(data.table)
library(plyr)
testsubject<-fread("test/subject_test.txt")
trainsubject<-fread("train/subject_train.txt")
testdata<-fread("test/X_test.txt")
traindata<-fread("train/X_train.txt")
testact<-fread("test/y_test.txt")
trainact<-fread("train/y_train.txt")
subject<-rbind(testsubject,trainsubject)
setnames(subject,"V1","Subject")
act<-rbind(testact,trainact)
setnames(act,"V1","ActivityNum")
data<-rbind(testdata,traindata)
subject<-cbind(subject,act)
data<-cbind(subject,data)
setkey(data, Subject, Activity)
setnames(act,"ActivityNum","Activity")
setkey(data, Subject, Activity)
data<-rbind(testdata,traindata)
subject<-cbind(subject,act)
data<-cbind(subject,data)
setkey(data, Subject, Activity)
features<- fread("features.txt")
features<-setnames(features,names(features),c("Number","Name"))
features <- features[grepl("mean\\(\\)|std\\(\\)", Name)]
newfeatures$fCode <- newfeatures[, paste0("V", Number)]
features$fCode <- features[, paste0("V", Number)]
select <- c(key(data), features$fCode)
data<-data[,select,with = FALSE]
activities<-fread("activity_labels.txt")
setnames(activities, names(activities), c("ActivityNum", "actName"))
data<- merge(data,activities,by="Activity",all.x=TRUE)
setnames(activities, names(activities), c("Activity", "actName"))
data<- merge(data,activities,by="Activity",all.x=TRUE)
data<-data[,-2]
colnames<-newfeatures$Name
colnames<-features$Name
colnames <- gsub("Acc", "Accelerometr", colnames)
colnames <- gsub("Gyro", "Gyroscope", colnames)
colnames <- gsub("^t", "Time", colnames)
colnames <- gsub("^f", "Frequency", colnames)
colnames<- gsub("BodyBody", "Body", colnames)
colnames <- gsub("mean", "Mean", colnames)
colnames <- gsub("std", "Std", colnames)
colnames <- gsub("Mag", "Magnitude", colnames)
colnames <- gsub("\\(|\\)", "", colnames, perl  = TRUE)
old<-names(data)
old1<-old[-68]
old2<-old1[-1]
setnames(data,old=old2,new=colnames)
Tidydata<-ddply(data,c("Subject","actName"),numcolwise(mean))
head(data)
library(data.table)
library(plyr)
testsubject<-fread("test/subject_test.txt")
trainsubject<-fread("train/subject_train.txt")
testdata<-fread("test/X_test.txt")
traindata<-fread("train/X_train.txt")
testact<-fread("test/y_test.txt")
trainact<-fread("train/y_train.txt")
subject<-rbind(testsubject,trainsubject)
setnames(subject,"V1","Subject")
act<-rbind(testact,trainact)
setnames(act,"V1","Activity")
data<-rbind(testdata,traindata)
subject<-cbind(subject,act)
data<-cbind(subject,data)
setkey(data, Subject, Activity)
features<- fread("features.txt")
features<-setnames(features,names(features),c("Number","Name"))
features <- features[grepl("mean\\(\\)|std\\(\\)", Name)]
features$fCode <- features[, paste0("V", Number)]
select <- c(key(data), features$fCode)
data<-data[,select,with = FALSE]
activities<-fread("activity_labels.txt")
setnames(activities, names(activities), c("Activity", "actName"))
data<- merge(data,activities,by="Activity",all.x=TRUE)
head(data)
data<-data[,-1]
colnames<-features$Name
colnames <- gsub("Acc", "Accelerometr", colnames)
colnames <- gsub("Gyro", "Gyroscope", colnames)
colnames <- gsub("^t", "Time", colnames)
colnames <- gsub("^f", "Frequency", colnames)
colnames<- gsub("BodyBody", "Body", colnames)
colnames <- gsub("mean", "Mean", colnames)
colnames <- gsub("std", "Std", colnames)
colnames <- gsub("Mag", "Magnitude", colnames)
colnames <- gsub("\\(|\\)", "", colnames, perl  = TRUE)
old<-names(data)
old1<-old[-68]
old2<-old1[-1]
setnames(data,old=old2,new=colnames)
Tidydata<-ddply(data,c("Subject","actName"),numcolwise(mean))
write.table(Tidydata,file="Tidydata.txt")
codebook <- data.frame(variable.name=c(names(Tidydata)),
Description=c("ID the subject who performed the activity for each window sample. Its range is from 1 to 30.",
"Activity name",
"Average from mean of time variable for body signal in X direction using Accelerometr",
"Average from mean of time variable for body signal in Y direction using Accelerometr",
"Average from mean of time variable for body signal in Z direction using Accelerometr",
"Average from standard deviation of time variable for body signal in X direction using Accelerometr",
"Average from standard deviation of time variable for body signal in Y direction using Accelerometr",
"Average from standard deviation of time variable for body signal in Z direction using Accelerometr",
"Average from mean of gravity variable for body signal in X direction using Accelerometr",
"Average from mean of gravity variable for body signal in Y direction using Accelerometr",
"Average from mean of gravity variable for body signal in Z direction using Accelerometr",
"Average from standard deviation of gravity variable for body signal in X direction using Accelerometr",
"Average from standard deviation of gravity variable for body signal in Y direction using Accelerometr",
"Average from standard deviation of gravity variable for body signal in Z direction using Accelerometr",
"Average from mean of time variable for body Jerk signal in X direction using Accelerometr",
"Average from mean of time variable for body Jerk signal in Y direction using Accelerometr",
"Average from mean of time variable for body Jerk signal in Z direction using Accelerometr",
"Average from standard deviation of time variable for body Jerk signal in X direction using Accelerometr",
"Average from standard deviation of time variable for body Jerk signal in Y direction using Accelerometr",
"Average from standard deviation of time variable for body Jerk signal in Z direction using Accelerometr",
"Average from mean of time variable for body signal in X direction using Gyroscope",
"Average from mean of time variable for body signal in Y direction using Gyroscope",
"Average from mean of time variable for body signal in Z direction using Gyroscope",
"Average from standard deviation of time variable for body signal in X direction using Gyroscope",
"Average from standard deviation of time variable for body signal in Y direction using Gyroscope",
"Average from standard deviation of time variable for body signal in Z direction using Gyroscope",
"Average from mean of time variable for body Jerk signal in X direction using Gyroscope",
"Average from mean of time variable for body Jerk signal in Y direction using Gyroscope",
"Average from mean of time variable for body Jerk signal in Z direction using Gyroscope",
"Average from standard deviation of time variable for body Jerk signal in X direction using Gyroscope",
"Average from standard deviation of time variable for body Jerk signal in Y direction using Gyroscope",
"Average from standard deviation of time variable for body Jerk signal in Z direction using Gyroscope",
"Average from mean of time variable for body signal magnitude using Accelerometr",
"Average from standard deviation of time variable for body signal magnitude using Accelerometr",
"Average from mean of time variable for gravity signal magnitude using Accelerometr",
"Average from standard deviation of time variable for graviry signal magnitude using Accelerometr",
"Average from mean of time variable for body Jerk signal magnitude using Accelerometr",
"Average from standard deviation of time variable for body Jerk signal magnitude using Accelerometr",
"Average from mean of time variable for body signal magnitude using Gyroscope",
"Average from standard deviation of time variable for body signal magnitude using Gyroscope",
"Average from mean of time variable for body Jerk signal magnitude using Gyroscope",
"Average from standard deviation of time variable for body Jerk signal magnitude using Gyroscope",
"Average from mean of frequency variable for body signal in X direction using Accelerometr",
"Average from mean of frequency variable for body signal in Y direction using Accelerometr",
"Average from mean of frequency variable for body signal in Z direction using Accelerometr",
"Average from standard deviation of frequency variable for body signal in X direction using Accelerometr",
"Average from standard deviation of frequency variable for body signal in Y direction using Accelerometr",
"Average from standard deviation of frequency variable for body signal in Z direction using Accelerometr",
"Average from mean of frequency variable for body Jerk signal in X direction using Accelerometr",
"Average from mean of frequency variable for body Jerk signal in Y direction using Accelerometr",
"Average from mean of frequency variable for body Jerk signal in Z direction using Accelerometr",
"Average from standard deviation of frequency variable for body Jerk signal in X direction using Accelerometr",
"Average from standard deviation of frequency variable for body Jerk signal in Y direction using Accelerometr",
"Average from standard deviation of frequency variable for body Jerk signal in Z direction using Accelerometr",
"Average from mean of frequency variable for body signal in X direction using Gyroscope",
"Average from mean of frequency variable for body signal in Y direction using Gyroscope",
"Average from mean of frequency variable for body signal in Z direction using Gyroscope",
"Average from standard deviation of frequency variable for body signal in X direction using Gyroscope",
"Average from standard deviation of frequency variable for body signal in Y direction using Gyroscope",
"Average from standard deviation of frequency variable for body signal in Z direction using Gyroscope",
"Average from mean of frequency variable for body signal magnitude using Accelerometr",
"Average from standard deviation of frequency variable for body signal magnitude using Accelerometr",
"Average from mean of frequency variable for body Jerk signal magnitude using Accelerometr",
"Average from standard deviation of frequency variable for body Jerk signal magnitude using Accelerometr",
"Average from mean of frequency variable for body signal magnitude using Gyroscope",
"Average from standard deviation of frequency variable for body signal magnitude using Gyroscope",
"Average from mean of frequency variable for body Jerk signal magnitude using Gyroscope",
"Average from standard deviation of frequency variable for body Jerk signal magnitude using Gyroscope"
),
source=rep("CourseraAssig3",length(Tidydata)),
filename = rep("CodeBook.md",length(Tidydata))
)
write.table(codebook,file="CodeBook.md")
